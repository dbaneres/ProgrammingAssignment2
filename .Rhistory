install.packages("KernSmooth")
library(KernSmooth)
clear
x <- 4
class(x)
x <- 4.0
class(x)
x <- c(4, "a", TRUE)
class(x)
print x
print(x)
help(cbind)
m <- cbind(1, 1:7) # the '1' (= shorter vector) is recycled
m
x <- c(1,3, 5) and y <- c(3, 2, 10),
x <- c(1,3, 5)
y <- c(3, 2, 10),
y <- c(3, 2, 10)
cbind(x,y)
attributes(x)
attributes(x)
help(vector)
print .Machine$integer.max
.Machine$integer.max
x <- list(2, "a", "b", TRUE)
x[[2]]
x[2]
e <- x[2]
class(e)
e <- x[[2]
class(e)
e <- x[[2]]
class(e)
x <- 1:4
y <- 2:3
e <- x+y
e
class(e)
class(x)
x <- c(3, 5, 1, 10, 12, 6)
x[x < 6] == 0
x[x %in% 1:5] <- 0
x
data <- read.csv(hw1_data.csv)
hw1_data <- read.csv("C:/Users/dbaneres/Desktop/hw1_data.csv")
View(hw1_data)
hw1_data[2, ]
hw1_data[1:2, ]
hw1_data[,1]
len(hw1_data[,1])
lenght(hw1_data[,1])
length(hw1_data[,1])
hw1_data[-1:-2, ]
hw1_data[-153:-152, ]
hw1_data[152:153, ]
hw1_data[47,"Ozone"]
hw1_data[,"Ozone"]
x <- hw1_data[,"Ozone"]
y <- is.na(x)
length(y)
y
length(y[TRUE])
x[y]
length(x[y])
e <- x[!y]
e
help(mean)
mean(e)
e <- hw1_data["Ozone" > 31]
e
help(is)
help("subset.matrix")
e <- subset(hw1_data, Ozone > 31)
e1 <- subset(e, Temp > 90)
mean(e1)
mean(e1[[Solar.R]])
mean(e1[Solar.R])
mean(e1["Solar.R"])
e1
mean(e1$Solar.R])
mean(e1$Solar.R)
e <- subset(hw1_data, month == 6)
e <- subset(hw1_data, Month == 6)
mean(e$Temp)
e <- subset(hw1_data, Month == 5)
max(e$Ozone)
e
m <- is.na(e)
e1 <- e[!m]
e1
max(e1)
e <- subset(hw1_data, Month == 5)
e
e1 <- e$Ozone
e1
max(e1)
m <- is.na(e1)
e2 <- e1[!m]
e2
max(e2)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
getwd("C:\Users\dbaneres\Documents\GitHub\ProgrammingAssignment2")
getwd("C:\\Users\\dbaneres\\Documents\\GitHub\\ProgrammingAssignment2")
?getwd
setwd("C:\\Users\\dbaneres\\Documents\\GitHub\\ProgrammingAssignment2")
soure "cachematrix.R"
source("cachematrix.R")
list = matrix(c(1,2,3,4),nrow=2, ncol=2)
list
cacheSolve(list)
sp <- makeCacheMatrix(list)
cacheSolve(sp)
cacheSolve(sp)
source("cachematrix.R")
sp <- makeCacheMatrix(list)
cacheSolve(sp)
cacheSolve(sp)
